{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState } from 'react';\n\n/*==========================================================\r\n * Context for providing API object\r\n */\nexport const ApiContext = /*#__PURE__*/createContext(undefined);\n\n/*==========================================================\r\n * Hook to use a provided API object\r\n */\nexport function useApi() {\n  _s();\n  return useContext(ApiContext);\n}\n\n/*==========================================================\r\n * Hook to create a new API object (stored as state)\r\n */\n_s(useApi, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function useNewApi() {\n  _s2();\n  let [api, setApi] = useState(() => new Api(sessionStorage.getItem('asq-token')));\n\n  // Override the setToken method to create a new API object\n  api.setToken = function setToken(token) {\n    if (token !== api.token) {\n      if (token) {\n        sessionStorage.setItem('asq-token', token);\n      } else {\n        sessionStorage.removeItem('asq-token');\n      }\n      setApi(new Api(token));\n    }\n  };\n  return api;\n}\n\n/*==========================================================\r\n * Actual API class\r\n */\n_s2(useNewApi, \"gtzgcVkVC/Y7MdRsOYvVLw6dNbU=\");\nlet url = 'https://taz.harding.edu/api';\nexport class Api {\n  // The access token, or null if not logged in\n  // token\n\n  // Notify API owner to use new token (will be overridden)\n  setToken(token) {}\n  // Property to test if logged in\n  get loggedIn() {\n    return this.token !== null;\n  }\n\n  // Constructor\n  constructor(token) {\n    this.token = token;\n    getInfo().then(result => this.username = result.username);\n  }\n\n  // API METHODS:\n\n  async exampleMethod() {\n    let response = await fetch('http://localhost:8000/api/endpoint', {\n      mode: 'cors',\n      headers: {\n        'Authorization': 'Bearer ' + this.token\n      }\n    });\n    if (response.ok) {\n      return response.json();\n    } else if (response.status === 401) {\n      this.setToken(null);\n    } else {\n      throw response.json();\n    }\n  }\n  async getQuestions() {\n    let response = await fetch(url + '/questions', {\n      mode: 'cors',\n      method: 'GET',\n      headers: {\n        'Authorization': 'Bearer ' + this.token\n      }\n    });\n    if (response.ok) {\n      let result = await response.json();\n      return result;\n    } else if (response.status == 401) {\n      this.setToken(null);\n    }\n  }\n  async getAnswers(questionid) {\n    let response = await fetch(url + '/questions/' + questionid + '/answers', {\n      method: 'GET',\n      mode: 'cors',\n      headers: {\n        'Authorization': 'Bearer ' + this.token\n      }\n    });\n    let result = response.json();\n    return result;\n  }\n  async getOneQuestion(questionid) {\n    let response = await fetch(url + '/questions/' + questionid, {\n      method: 'GET',\n      mode: 'cors',\n      headers: {\n        'Authorization': 'Bearer ' + this.token\n      }\n    });\n    let result = response.json();\n    return result;\n  }\n\n  //author, summary, contents\n  async postQuestion(author, summary, contents) {\n    let response = await fetch(url + '/questions', {\n      mode: 'cors',\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + this.token\n      },\n      body: JSON.stringify({\n        author: author,\n        summary: summary,\n        contents: contents\n      })\n    });\n    return await response.json();\n  }\n\n  //create answer\n  async postAnswer(author, contents, questionid) {\n    let response = await fetch(url + '/questions/' + questionid + '/answers', {\n      mode: 'cors',\n      method: 'POST',\n      headers: {\n        'Authorization': 'Bearer ' + this.token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        author: author,\n        contents: contents\n      })\n    });\n    return response.json();\n  }\n\n  //giveLike\n  async postLike(postid, user) {\n    let response = await fetch(url + '/likes' + '/' + postid + '/' + user, {\n      mode: 'cors',\n      method: 'POST',\n      headers: {\n        'Authorization': 'Bearer ' + this.token,\n        'Content-Type': 'application/json'\n      }\n    });\n    return response.json();\n  }\n\n  //deleteLike\n  async deleteLike(postid, user) {\n    let response = await fetch(url + '/likes' + '/' + postid + '/' + user, {\n      mode: 'cors',\n      method: 'DELETE',\n      headers: {\n        'Authorization': 'Bearer ' + this.token,\n        'Content-Type': 'application/json'\n      }\n    });\n    return response.json();\n  }\n}","map":{"version":3,"names":["createContext","useContext","useState","ApiContext","undefined","useApi","_s","useNewApi","_s2","api","setApi","Api","sessionStorage","getItem","setToken","token","setItem","removeItem","url","loggedIn","constructor","getInfo","then","result","username","exampleMethod","response","fetch","mode","headers","ok","json","status","getQuestions","method","getAnswers","questionid","getOneQuestion","postQuestion","author","summary","contents","body","JSON","stringify","postAnswer","postLike","postid","user","deleteLike"],"sources":["C:/Users/David/Documents/asq-gui-js/src/api.js"],"sourcesContent":["import { createContext, useContext, useState } from 'react';\r\n\r\n/*==========================================================\r\n * Context for providing API object\r\n */\r\nexport const ApiContext = createContext(undefined);\r\n\r\n/*==========================================================\r\n * Hook to use a provided API object\r\n */\r\nexport function useApi() {\r\n  return useContext(ApiContext);\r\n}\r\n\r\n/*==========================================================\r\n * Hook to create a new API object (stored as state)\r\n */\r\nexport function useNewApi() {\r\n  let [api, setApi] = useState(() => new Api(sessionStorage.getItem('asq-token')));\r\n\r\n  // Override the setToken method to create a new API object\r\n  api.setToken = function setToken(token) {\r\n    if (token !== api.token) {\r\n      if (token) {\r\n        sessionStorage.setItem('asq-token', token);\r\n      }\r\n      else {\r\n        sessionStorage.removeItem('asq-token');\r\n      }\r\n      setApi(new Api(token));\r\n    }\r\n  }\r\n\r\n  return api;\r\n}\r\n\r\n/*==========================================================\r\n * Actual API class\r\n */\r\nlet url = 'https://taz.harding.edu/api';\r\nexport class Api {\r\n\r\n  // The access token, or null if not logged in\r\n  // token\r\n\r\n  // Notify API owner to use new token (will be overridden)\r\n  setToken(token) { };\r\n\r\n  // Property to test if logged in\r\n  get loggedIn() {\r\n    return this.token !== null;\r\n  }\r\n\r\n  // Constructor\r\n  constructor(token) {\r\n    this.token = token;\r\n    getInfo().then((result) => this.username = result.username);\r\n  }\r\n\r\n  // API METHODS:\r\n\r\n\r\n  async exampleMethod() {\r\n    let response = await fetch('http://localhost:8000/api/endpoint', {\r\n      mode: 'cors',\r\n      headers: {\r\n        'Authorization': 'Bearer ' + this.token,\r\n      },\r\n    });\r\n\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    else if (response.status === 401) {\r\n      this.setToken(null);\r\n    }\r\n    else {\r\n      throw response.json();\r\n    }\r\n  }\r\n\r\n  async getQuestions(){\r\n    let response = await fetch(url + '/questions',{\r\n      mode: 'cors',\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': 'Bearer ' + this.token,\r\n      }\r\n    });\r\n    if(response.ok){\r\n    let result = await response.json();\r\n    return result;\r\n    }else if(response.status == 401){\r\n      this.setToken(null);\r\n    }\r\n\r\n  }\r\n\r\n  async getAnswers(questionid){\r\n    let response = await fetch(url + '/questions/' + questionid + '/answers', {\r\n      method: 'GET',\r\n      mode: 'cors',\r\n      headers:{\r\n        'Authorization': 'Bearer ' + this.token,\r\n      }\r\n    });\r\n\r\n    let result = response.json();\r\n    return result; \r\n  }\r\n\r\n  async getOneQuestion(questionid){\r\n    let response = await fetch(url + '/questions/' + questionid,{\r\n      method: 'GET',\r\n      mode: 'cors',\r\n      headers:{\r\n        'Authorization': 'Bearer ' + this.token,\r\n      }\r\n\r\n    });\r\n\r\n    let result = response.json();\r\n    return result; \r\n  }\r\n\r\n  //author, summary, contents\r\n  async postQuestion(author, summary, contents){\r\n    let response = await fetch(url+'/questions', {\r\n      mode: 'cors',\r\n      method: 'POST',\r\n      headers:{\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Bearer ' + this.token,\r\n            },\r\n      body: JSON.stringify({\r\n        author: author,\r\n        summary: summary,\r\n        contents: contents\r\n      })\r\n    });\r\n    return await response.json();\r\n\r\n  }\r\n\r\n  //create answer\r\n  async postAnswer(author, contents, questionid){\r\n    let response = await fetch(url + '/questions/' + questionid + '/answers', {\r\n      mode: 'cors',\r\n      method: 'POST',\r\n      headers:{\r\n        'Authorization': 'Bearer ' + this.token,\r\n        'Content-Type': 'application/json'\r\n            },\r\n      body: JSON.stringify({\r\n        author: author,\r\n        contents: contents\r\n      })\r\n    });\r\n    return response.json();\r\n\r\n  }\r\n\r\n  //giveLike\r\n  async postLike(postid,user){\r\n    let response = await fetch(url + '/likes' + '/' + postid + '/' + user, {\r\n      mode: 'cors',\r\n      method: 'POST',\r\n      headers:{\r\n        'Authorization': 'Bearer ' + this.token,\r\n        'Content-Type': 'application/json'\r\n            },\r\n    });\r\n    return response.json();\r\n  }\r\n\r\n  //deleteLike\r\n  async deleteLike(postid,user){\r\n    let response = await fetch(url + '/likes' + '/' + postid + '/' + user, {\r\n      mode: 'cors',\r\n      method: 'DELETE',\r\n      headers:{\r\n        'Authorization': 'Bearer ' + this.token,\r\n        'Content-Type': 'application/json'\r\n            },\r\n    });\r\n    return response.json();\r\n  }\r\n  \r\n}\r\n\r\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;;AAE3D;AACA;AACA;AACA,OAAO,MAAMC,UAAU,gBAAGH,aAAa,CAACI,SAAS,CAAC;;AAElD;AACA;AACA;AACA,OAAO,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EACvB,OAAOL,UAAU,CAACE,UAAU,CAAC;AAC/B;;AAEA;AACA;AACA;AAFAG,EAAA,CAJgBD,MAAM;AAOtB,OAAO,SAASE,SAASA,CAAA,EAAG;EAAAC,GAAA;EAC1B,IAAI,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGR,QAAQ,CAAC,MAAM,IAAIS,GAAG,CAACC,cAAc,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;;EAEhF;EACAJ,GAAG,CAACK,QAAQ,GAAG,SAASA,QAAQA,CAACC,KAAK,EAAE;IACtC,IAAIA,KAAK,KAAKN,GAAG,CAACM,KAAK,EAAE;MACvB,IAAIA,KAAK,EAAE;QACTH,cAAc,CAACI,OAAO,CAAC,WAAW,EAAED,KAAK,CAAC;MAC5C,CAAC,MACI;QACHH,cAAc,CAACK,UAAU,CAAC,WAAW,CAAC;MACxC;MACAP,MAAM,CAAC,IAAIC,GAAG,CAACI,KAAK,CAAC,CAAC;IACxB;EACF,CAAC;EAED,OAAON,GAAG;AACZ;;AAEA;AACA;AACA;AAFAD,GAAA,CAnBgBD,SAAS;AAsBzB,IAAIW,GAAG,GAAG,6BAA6B;AACvC,OAAO,MAAMP,GAAG,CAAC;EAEf;EACA;;EAEA;EACAG,QAAQA,CAACC,KAAK,EAAE,CAAE;EAElB;EACA,IAAII,QAAQA,CAAA,EAAG;IACb,OAAO,IAAI,CAACJ,KAAK,KAAK,IAAI;EAC5B;;EAEA;EACAK,WAAWA,CAACL,KAAK,EAAE;IACjB,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClBM,OAAO,CAAC,CAAC,CAACC,IAAI,CAAEC,MAAM,IAAK,IAAI,CAACC,QAAQ,GAAGD,MAAM,CAACC,QAAQ,CAAC;EAC7D;;EAEA;;EAGA,MAAMC,aAAaA,CAAA,EAAG;IACpB,IAAIC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,EAAE;MAC/DC,IAAI,EAAE,MAAM;MACZC,OAAO,EAAE;QACP,eAAe,EAAE,SAAS,GAAG,IAAI,CAACd;MACpC;IACF,CAAC,CAAC;IAEF,IAAIW,QAAQ,CAACI,EAAE,EAAE;MACf,OAAOJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IACxB,CAAC,MACI,IAAIL,QAAQ,CAACM,MAAM,KAAK,GAAG,EAAE;MAChC,IAAI,CAAClB,QAAQ,CAAC,IAAI,CAAC;IACrB,CAAC,MACI;MACH,MAAMY,QAAQ,CAACK,IAAI,CAAC,CAAC;IACvB;EACF;EAEA,MAAME,YAAYA,CAAA,EAAE;IAClB,IAAIP,QAAQ,GAAG,MAAMC,KAAK,CAACT,GAAG,GAAG,YAAY,EAAC;MAC5CU,IAAI,EAAE,MAAM;MACZM,MAAM,EAAE,KAAK;MACbL,OAAO,EAAE;QACP,eAAe,EAAE,SAAS,GAAG,IAAI,CAACd;MACpC;IACF,CAAC,CAAC;IACF,IAAGW,QAAQ,CAACI,EAAE,EAAC;MACf,IAAIP,MAAM,GAAG,MAAMG,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClC,OAAOR,MAAM;IACb,CAAC,MAAK,IAAGG,QAAQ,CAACM,MAAM,IAAI,GAAG,EAAC;MAC9B,IAAI,CAAClB,QAAQ,CAAC,IAAI,CAAC;IACrB;EAEF;EAEA,MAAMqB,UAAUA,CAACC,UAAU,EAAC;IAC1B,IAAIV,QAAQ,GAAG,MAAMC,KAAK,CAACT,GAAG,GAAG,aAAa,GAAGkB,UAAU,GAAG,UAAU,EAAE;MACxEF,MAAM,EAAE,KAAK;MACbN,IAAI,EAAE,MAAM;MACZC,OAAO,EAAC;QACN,eAAe,EAAE,SAAS,GAAG,IAAI,CAACd;MACpC;IACF,CAAC,CAAC;IAEF,IAAIQ,MAAM,GAAGG,QAAQ,CAACK,IAAI,CAAC,CAAC;IAC5B,OAAOR,MAAM;EACf;EAEA,MAAMc,cAAcA,CAACD,UAAU,EAAC;IAC9B,IAAIV,QAAQ,GAAG,MAAMC,KAAK,CAACT,GAAG,GAAG,aAAa,GAAGkB,UAAU,EAAC;MAC1DF,MAAM,EAAE,KAAK;MACbN,IAAI,EAAE,MAAM;MACZC,OAAO,EAAC;QACN,eAAe,EAAE,SAAS,GAAG,IAAI,CAACd;MACpC;IAEF,CAAC,CAAC;IAEF,IAAIQ,MAAM,GAAGG,QAAQ,CAACK,IAAI,CAAC,CAAC;IAC5B,OAAOR,MAAM;EACf;;EAEA;EACA,MAAMe,YAAYA,CAACC,MAAM,EAAEC,OAAO,EAAEC,QAAQ,EAAC;IAC3C,IAAIf,QAAQ,GAAG,MAAMC,KAAK,CAACT,GAAG,GAAC,YAAY,EAAE;MAC3CU,IAAI,EAAE,MAAM;MACZM,MAAM,EAAE,MAAM;MACdL,OAAO,EAAC;QACN,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,SAAS,GAAG,IAAI,CAACd;MAC9B,CAAC;MACP2B,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBL,MAAM,EAAEA,MAAM;QACdC,OAAO,EAAEA,OAAO;QAChBC,QAAQ,EAAEA;MACZ,CAAC;IACH,CAAC,CAAC;IACF,OAAO,MAAMf,QAAQ,CAACK,IAAI,CAAC,CAAC;EAE9B;;EAEA;EACA,MAAMc,UAAUA,CAACN,MAAM,EAAEE,QAAQ,EAAEL,UAAU,EAAC;IAC5C,IAAIV,QAAQ,GAAG,MAAMC,KAAK,CAACT,GAAG,GAAG,aAAa,GAAGkB,UAAU,GAAG,UAAU,EAAE;MACxER,IAAI,EAAE,MAAM;MACZM,MAAM,EAAE,MAAM;MACdL,OAAO,EAAC;QACN,eAAe,EAAE,SAAS,GAAG,IAAI,CAACd,KAAK;QACvC,cAAc,EAAE;MACZ,CAAC;MACP2B,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBL,MAAM,EAAEA,MAAM;QACdE,QAAQ,EAAEA;MACZ,CAAC;IACH,CAAC,CAAC;IACF,OAAOf,QAAQ,CAACK,IAAI,CAAC,CAAC;EAExB;;EAEA;EACA,MAAMe,QAAQA,CAACC,MAAM,EAACC,IAAI,EAAC;IACzB,IAAItB,QAAQ,GAAG,MAAMC,KAAK,CAACT,GAAG,GAAG,QAAQ,GAAG,GAAG,GAAG6B,MAAM,GAAG,GAAG,GAAGC,IAAI,EAAE;MACrEpB,IAAI,EAAE,MAAM;MACZM,MAAM,EAAE,MAAM;MACdL,OAAO,EAAC;QACN,eAAe,EAAE,SAAS,GAAG,IAAI,CAACd,KAAK;QACvC,cAAc,EAAE;MACZ;IACR,CAAC,CAAC;IACF,OAAOW,QAAQ,CAACK,IAAI,CAAC,CAAC;EACxB;;EAEA;EACA,MAAMkB,UAAUA,CAACF,MAAM,EAACC,IAAI,EAAC;IAC3B,IAAItB,QAAQ,GAAG,MAAMC,KAAK,CAACT,GAAG,GAAG,QAAQ,GAAG,GAAG,GAAG6B,MAAM,GAAG,GAAG,GAAGC,IAAI,EAAE;MACrEpB,IAAI,EAAE,MAAM;MACZM,MAAM,EAAE,QAAQ;MAChBL,OAAO,EAAC;QACN,eAAe,EAAE,SAAS,GAAG,IAAI,CAACd,KAAK;QACvC,cAAc,EAAE;MACZ;IACR,CAAC,CAAC;IACF,OAAOW,QAAQ,CAACK,IAAI,CAAC,CAAC;EACxB;AAEF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}